#version 410 // -*- c++ -*-
#include <g3dmath.glsl>
#include <Texture/Texture.glsl>
#include "Surfel.glsl"

struct Sphere {
	Point3 center;
	float  radius;
};

struct Box {
	Point3 center;
	vec3   size;
};
struct CappedCylinder {
	Point3 center;
	float  height;
	float  radius;
};

struct RotatedCappedCylinder {
	Point3 center;
	float  height;
	float  radius;
};

struct VerticalCapsule {
	Point3 center;
	float  height;
	float  radius;
};

// Input arguments from the C++ program
uniform mat4x3 cameraToWorldMatrix;

uniform TextureCube	environmentMap;

uniform float tanHalfFieldOfViewY;
uniform float projectionMatrix22, projectionMatrix23;

// Output to the App::m_framebuffer
out Color3 pixelColor;



float opDist(Point3 X, Sphere sphere)
{
	return length(X - sphere.center) - sphere.radius;
}

float opDist(Point3 X, Box box)
{
	// https://iquilezles.org/articles/distfunctions/
	Point3 normalizedX = X - box.center;
	
	vec3 q = abs(normalizedX) - box.size;
	return length(max(q, 0.0f)) + min(max(q.x, max(q.y, q.z)), 0.0f);
}

float opDist(Point3 X, CappedCylinder cylinder)
{
	// https://iquilezles.org/articles/distfunctions/
	Point3 normalizedX = X - cylinder.center;

	vec2 d = abs(vec2(length(normalizedX.xz), normalizedX.y)) - vec2(cylinder.height, cylinder.radius);
	return min(max(d.x, d.y), 0.0f) + length(max(d, 0.0f));
}

float opDist(Point3 X, RotatedCappedCylinder cylinder)
{
	// https://iquilezles.org/articles/distfunctions/
	Point3 normalizedX = X - cylinder.center;

	float tmpY = normalizedX.y;

	normalizedX.y = -normalizedX.z;
	normalizedX.z = tmpY;

	vec2 d = abs(vec2(length(normalizedX.xz), normalizedX.y)) - vec2(cylinder.height, cylinder.radius);
	return min(max(d.x, d.y), 0.0f) + length(max(d, 0.0f));
}

float opDist(Point3 X, VerticalCapsule capsule)
{
	Point3 normalizedX = X - capsule.center;

	normalizedX.y -= clamp(normalizedX.y, 0.0f, capsule.height);
	return length(normalizedX) - capsule.radius;
}



float opUnion(float dist1, Material material1, float dist2, Material material2, inout Material selectedMaterial)
{
	if (dist1 < dist2) {
		selectedMaterial = material1;
		return dist1;
	}

	selectedMaterial = material2;
	return dist2;
}



float opUnionSmooth(float dist1, Material material1, float dist2, Material material2, float blendRadius, inout Material selectedMaterial)
{
	// https://iquilezles.org/articles/distfunctions/
	if (dist1 < dist2) {
		selectedMaterial = material1;
	} else {
		selectedMaterial = material2;
	}

	float c = saturate(0.5f + (dist2 - dist1) * (0.5f / blendRadius));
	return mix(dist2, dist1, c) - blendRadius * c * (1.0f - c);
}



float opIntersection(float dist1, Material material1, float dist2, Material material2, inout Material selectedMaterial)
{
	if (dist1 > dist2) {
		selectedMaterial = material1;
		return dist1;
	}

	selectedMaterial = material2;
	return dist2;
}

float opIntersectionSmooth(float dist1, Material material1, float dist2, Material material2, float blendRadius, inout Material selectedMaterial)
{
	// https://iquilezles.org/articles/distfunctions/
	if (dist1 > dist2) {
		selectedMaterial = material1;
	} else {
		selectedMaterial = material2;
	}

	float c = clamp(0.5f - 0.5f * (dist2 - dist1) / blendRadius, 0.0f, 1.0f);
	return mix(dist2, dist1, c) + blendRadius * c * (1.0f - c);
}



float opSubtraction(float dist1, Material material1, float dist2, Material material2, inout Material selectedMaterial)
{
	selectedMaterial = material1;

	if (dist1 > -dist2) {
		return dist1;
	} else {
		return -dist2;
	}
}

float opSubtractionSmooth(float dist1, Material material1, float dist2, Material material2, float blendRadius, inout Material selectedMaterial)
{
	selectedMaterial = material1;

	float c = clamp(0.5f - 0.5f * (dist1 + dist2) / blendRadius, 0.0f, 1.0f);
	return mix(dist1, -dist2, c ) + blendRadius * c * (1.0f - c);
}






float randomObject(Point3 X, inout Material material)
{
	// return opIntersection(
	// return opSubtraction(
	return opUnion(
		opSubtractionSmooth(
			opDist(X, Sphere(Point3(0.2f, 1.0f, -1.0f), 0.4f)),
			Material(Color3(0.5f, 0.0f, 0.5f), 0.0f, 0.0f, 0.0f),

			opDist(X, Sphere(Point3(-0.2f, 1.0f, -1.0f), 0.4f)),
			Material(Color3(0.0f, 0.5f, 0.5f), 0.0f, 0.0f, 0.0f),

			0.2f,

			material),
		material,

		opDist(X, VerticalCapsule(Point3(1.0f, 0.0f, 0.0f), 1.0f, 0.3f)),
		Material(Color3(0.0f, 0.5f, 0.5f), 0.0f, 0.0f, 0.0f),

		material);
}



float sceneDistance(Point3 X, inout Material closestMaterial)
{
	float sceneDist = 10000000.0f;

	Material objectMaterial;
	float objectDist = randomObject(X, objectMaterial);

	sceneDist = opUnion(sceneDist, closestMaterial, objectDist, objectMaterial, closestMaterial);

	return sceneDist;
}



Vector3 fastNormal(Point3 X)
{
	const float e = 1e-4f;
	Material unusedMaterial;
	float d = sceneDistance(X, unusedMaterial);

	return normalize(Vector3(
			sceneDistance(X + Vector3(e, 0, 0), unusedMaterial),
			sceneDistance(X + Vector3(0, e, 0), unusedMaterial),
			sceneDistance(X + Vector3(0, 0, e), unusedMaterial)) - Vector3(d, d, d));
}



Radiance3 lambertianBrdf(Material material)
{
	return Radiance3(material.color / 3.14f);
}



Radiance3 shadeSurfel(Surfel surfel)
{
	vec3 sunRadiance = vec3(1.0f);
	vec3 sunDirection = normalize(vec3(-1.0f, -1.0f, -1.0f));

	vec3 direct = lambertianBrdf(surfel.material) * sunRadiance * max(dot(-sunDirection, surfel.normal), 0.0f);
	vec3 ambient = 0.3f * surfel.material.color;
	return direct + ambient;
}



Radiance3 traceRay(Point3 P, Vector3 w) {
	const float maxDistance   = 1e10;
	const int   maxIterations = 100;
	const float closeEnough   = 1e-2;

	float t = 0;
	Surfel closestSurfel;

	for (int i = 0; i < maxIterations; ++i) {
		float dt = sceneDistance(P + w * t, closestSurfel.material);
		t += dt;

		if (dt < closeEnough) {
			closestSurfel.position = P + w * t;
			closestSurfel.normal = fastNormal(closestSurfel.position);

			return shadeSurfel(closestSurfel);
		}
	}
	return sampleTexture(environmentMap, w).rgb;
}



void main()
{
	// Generate an eye ray in camera space, and then transform to world space

	// Primary ray origin	
	Point3 P  = cameraToWorldMatrix[3];

	// Primary ray direction
	Vector3 w = Matrix3(cameraToWorldMatrix) * 
		normalize(Vector3((gl_FragCoord.xy - g3d_FragCoordExtent / 2.0) * Vector2(1, -1),
						  g3d_FragCoordExtent.y / ( -2.0 * tanHalfFieldOfViewY)));

	float maxDist = inf;	   

	//////////////////////////////////////

	// Render the scene here

	pixelColor = traceRay(P, w);

	//////////////////////////////////////
	 
	// Camera space z value
	float csZ = maxDist / w.z;
	
	// Pack into standard OpenGL depth buffer format to make the result compatible
	// with rasterization and post-processing.
	gl_FragDepth = (maxDist == inf) ? 1.0 : ((projectionMatrix22 * csZ + projectionMatrix23) / -csZ);
}
